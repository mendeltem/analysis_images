#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 14 15:09:32 2019

@author: DD

contains objects providing image data generators for use in keras models

not tested!!
"""
import tensorflow as tf
ImageDataGenerator = tf.keras.preprocessing.image.ImageDataGenerator
from sklearn.model_selection import train_test_split

class ImMaGenFlowProv:
  """Images and masks generators provider using flow and
  !!numpy arrays!! as input.

  !!!outdated untested!!!

  Arguments:
    images: numpy array

    masks: numpy array

    aug_dict_train: augmentation keyword dictionary for training

    aug_dict_test: augmentation keyword dictionary for training

    val_ratio: ratio of val test on total set

    stratify: class labels for total set to do train test split based on
    class labels

    seed: random seed for everything happening randomly
  """
  def __init__(self,
               images,
               masks,
               aug_dict_train,
               aug_dict_test,
               val_ratio,
               stratify,
               seed
               ):
    #init arguments
    self.images = images
    self.masks = masks
    self.aug_dict_train = aug_dict_train
    self.aug_dict_test = aug_dict_test
    self.seed = seed
    self.val_ratio = val_ratio
    self.stratify = stratify
    #instance variables being filled later
    self.images_train = None
    self.images_test = None
    self.masks_train = None
    self.masks_test = None
    #non public variables
    self._image_data_generator = None
    self._default_flow_kwargs = {'batch_size' : 32,
                                 'save_to_dir' : None,
                                 'save_prefix' : '',
                                 'save_format' : "png"}
    self._generator_train = None
    self._gen_train_flow_kwargs = None
    self._generator_test = None
    self._gen_test_flow_kwargs = None

  def set_idg_flow_args(self,
                        mode = 'train',
                        batch_size = 32,
                        save_to_dir = None,
                        save_prefix = '',
                        save_format = "png"):
    """set the remaining keyword arguments for the image data generator
    flow defining how data is delivered by the generators and if it
    is saved.

    Arguments:
      mode: enter train or test to set flow args for either the train
      generator or the test generator

      batch_size: set batch size for the flow out of the generator

      save_to_dir: enter dir to save images generated by the generator

      save_prefix: prefix for saved images only releveant if save_to_dir is
      set

      save_format: format of the saved images. default is 'png'

    Returns:
      None
    """
    if mode == 'train':
      self._gen_train_flow_kwargs = {'batch_size' : batch_size,
                                     'save_to_dir' : save_to_dir,
                                     'save_prefix' : save_prefix,
                                     'save_format' : save_format}
    elif mode == 'test':
      self._gen_test_flow_kwargs = {'batch_size' : batch_size,
                                    'save_to_dir' : save_to_dir,
                                    'save_prefix' : save_prefix,
                                    'save_format' : save_format}
    else:
      raise ValueError('mode has to be either "train" or "test"')

  def _get_gen_train_flow_kwargs(self):
    """get the remaining keyword arguments for the flow of the train generator
    """
    if self._gen_train_flow_kwargs:
      return self._gen_train_flow_kwargs
    else:
      return self._default_flow_kwargs

  def _get_gen_test_flow_kwargs(self):
    """get the remaining keyword arguments for the flow of the test generator
    """
    if self._gen_test_flow_kwargs:
      return self._gen_test_flow_kwargs
    else:
      return self._default_flow_kwargs

  def _split_data(self):
    """splits the images and the masks into train and test sets and fills the
    associated instance variables
    """
    self.images_train, self.images_test, self.masks_train, self.masks_test = \
    train_test_split(self.images,
                     self.masks,
                     test_size = self.val_ratio,
                     random_state = self.seed,
                     stratify = self.stratify)

  def get_train_generator(self):
    """get and/or create the train generator of this instance
    """
    if not self._generator_train:
      if not self.images_train or not self.masks_train:
        self._split_data()
      idg_images = ImageDataGenerator(**self.aug_dict_train)
      image_gen = idg_images.flow(x = self.images_train,
                      y = None,
                      shuffle = True,
                      seed = self.seed,
                      sample_weight = None,
                      **self._get_gen_train_flow_kwargs()
                      )
      idg_masks = ImageDataGenerator(**self.aug_dict_train)
      mask_gen = idg_masks.flow(x = self.masks_train,
                     y = None,
                     shuffle = True,
                     seed = self.seed,
                     sample_weight = None,
                     **self._get_gen_train_flow_kwargs()
                     )
      self._generator_train = zip(image_gen, mask_gen)
    return self._generator_train

  def get_test_generator(self):
    """get and/or create the test generator of this instance
    """
    if not self._generator_test:
      if not self.images_test or not self.masks_test:
        self._split_data()
      idg_images = ImageDataGenerator(**self.aug_dict_test)
      image_gen = idg_images.flow(x = self.images_test,
                      y = None,
                      shuffle = True,
                      seed = self.seed,
                      sample_weight = None,
                      **self._get_gen_test_flow_kwargs()
                      )
      idg_masks = ImageDataGenerator(**self.aug_dict_test)
      mask_gen = idg_masks.flow(x = self.masks_test,
                     y = None,
                     shuffle = True,
                     seed = self.seed,
                     sample_weight = None,
                     **self._get_gen_test_flow_kwargs()
                     )
      self._generator_test = zip(image_gen, mask_gen)
    return self._generator_test

class ImMaGenDirFlowProv:
  """Images and masks generators provider using flow from directory as input.

  Arguments:
    images_train_dir: directory of training images with necessary subdirs.

    images_test_dir: directory of test images with necessary subdirs.

    masks_train_dir: directory of training mask images with necessary subdirs.

    masks_test_dir: directory of test mask images with necessary subdirs.

    aug_dict_train: augmentation keyword dictionary for training

    aug_dict_test: augmentation keyword dictionary for training

    seed: random seed for everything happening randomly
  """
  def __init__(self,
               images_train_dir,
               masks_train_dir,               
               images_test_dir,
               masks_test_dir,
               aug_dict_train,
               aug_dict_test,
               seed
               ):
    ##init arguments
    self.images_train_dir = images_train_dir
    self.images_test_dir = images_test_dir

    self.masks_train_dir = masks_train_dir
    self.masks_test_dir = masks_test_dir

    self.aug_dict_train = aug_dict_train
    self.aug_dict_test = aug_dict_test

    self.seed = seed
    ##instance variables being filled later
    self.images_train = None
    self.images_test = None
    self.masks_train = None
    self.masks_test = None
    ##non-public variables
    self._image_data_generator = None
    #has to be synchronized with the set function for the flow kwargs
    self._default_flow_kwargs = {
        'target_size' : (768,512),
        'color_mode' : 'rgb',
        'classes' : None,
        'class_mode' : None,
        'follow_links' : True,
        'subset' : None,
        'interpolation' : 'nearest',
        'batch_size' : 32,
        'save_to_dir' : None,
        'save_prefix' : '',
        'save_format' : "png"}
    self._generator_train = None
    self._gen_train_flow_kwargs = None
    self._generator_test = None
    self._gen_test_flow_kwargs = None

  #has to be synchronized with the default flow kwargs
  def set_idg_flow_args(self,
                        *,
                        mode = 'train',
                        target_size = (768,512),
                        color_mode = 'rgb',
                        classes = None,
                        class_mode = None,
                        follow_links = True,
                        subset = None,
                        interpolation = 'nearest',
                        batch_size = 32,
                        save_to_dir = None,
                        save_prefix = '',
                        save_format = "png"):
    """set the remaining keyword arguments for the image data generator
    flow defining how data is delivered by the generators and if it
    is saved.

    Arguments(need to be keywords):
      mode: enter train or test to set flow args for either the train
      generator or the test generator

      target_size: the target size for images to read in.

      color_mode: One of "grayscale", "rbg", "rgba". Default: "rgb".
      Whether the images will be converted to have 1, 3, or 4 channels.

      classes: Optional list of class subdirectories (e.g. ['dogs', 'cats']).
      Default: None. If not provided, the list of classes will be
      automatically inferred from the subdirectory names/structure
      under directory, where each subdirectory will be treated as a
      different class (and the order of the classes, which will map to
      the label indices, will be alphanumeric). The dictionary containing
      the mapping from class names to class indices can be obtained via
      the attribute class_indices.

      class_mode: One of "categorical", "binary", "sparse", "input",
      or None. Default: "categorical".

      follow_links: Whether to follow symlinks inside class subdirectories
      (default: True).

      subset: Subset of data ("training" or "validation") if
      validation_split is set in ImageDataGenerator.

      interpolation: Interpolation method used to resample the image if
      the target size is different from that of the loaded image. Supported
      methods are "nearest", "bilinear", and "bicubic". If PIL version
      1.1.3 or newer is installed, "lanczos" is also supported. If PIL
      version 3.4.0 or newer is installed, "box" and "hamming" are also
      supported. By default, "nearest" is used.

      batch_size: set batch size for the flow out of the generator

      save_to_dir: enter dir to save images generated by the generator

      save_prefix: prefix for saved images only releveant if save_to_dir is
      set

      save_format: format of the saved images. default is 'png'

    Returns:
      None
    """
    if mode == 'train':
      self._gen_train_flow_kwargs =  {
          'target_size' : target_size,
          'color_mode' : color_mode,
          'classes' : classes,
          'class_mode' : class_mode,
          'follow_links' : follow_links,
          'subset' : subset,
          'interpolation' : interpolation,
          'batch_size' : batch_size,
          'save_to_dir' : save_to_dir,
          'save_prefix' : save_prefix,
          'save_format' : save_format}
    elif mode == 'test':
      self._gen_test_flow_kwargs = {
          'target_size' : target_size,
          'color_mode' : color_mode,
          'classes' : classes,
          'class_mode' : class_mode,
          'follow_links' : follow_links,
          'subset' : subset,
          'interpolation' : interpolation,
          'batch_size' : batch_size,
          'save_to_dir' : save_to_dir,
          'save_prefix' : save_prefix,
          'save_format' : save_format}
    else:
      raise ValueError('mode has to be either "train" or "test"')

  def _get_gen_train_flow_kwargs(self):
    """get the mutable keyword arguments for the flow of the train generator
    """
    if self._gen_train_flow_kwargs:
      yield self._gen_train_flow_kwargs
    else:
      yield self._default_flow_kwargs

  def _get_gen_test_flow_kwargs(self):
    """get the mutable keyword arguments for the flow of the test generator
    """
    if self._gen_test_flow_kwargs:
      yield self._gen_test_flow_kwargs
    else:
      yield self._default_flow_kwargs

  def get_train_generator(self):
    """get and/or create the train generator of this instance
    """
    if not self._generator_train:
      idg_images = ImageDataGenerator(**self.aug_dict_train)
      image_gen = idg_images.flow_from_directory(
          self.images_train_dir,
          shuffle = True,
          seed = self.seed,
          **self._get_gen_train_flow_kwargs()
          )
      idg_masks = ImageDataGenerator(**self.aug_dict_train)
      mask_gen = idg_masks.flow_from_directory(
          self.masks_train_dir,
          shuffle = True,
          seed = self.seed,
          **self._get_gen_train_flow_kwargs()
          )
      self._generator_train = zip(image_gen, mask_gen)
    yield self._generator_train

  def get_test_generator(self):
    """get and/or create the test generator of this instance
    """
    if not self._generator_test:
      idg_images = ImageDataGenerator(**self.aug_dict_test)
      image_gen = idg_images.flow_from_directory(self.images_test_dir,
                                     shuffle = True,
                                     seed = self.seed,
                                     **self._get_gen_test_flow_kwargs()
                                     )
      idg_masks = ImageDataGenerator(**self.aug_dict_test)
      mask_gen = idg_masks.flow_from_directory(self.masks_test_dir,
                                     shuffle = True,
                                     seed = self.seed,
                                     **self._get_gen_test_flow_kwargs()
                                     )
      self._generator_test = zip(image_gen, mask_gen)
    yield self._generator_test

